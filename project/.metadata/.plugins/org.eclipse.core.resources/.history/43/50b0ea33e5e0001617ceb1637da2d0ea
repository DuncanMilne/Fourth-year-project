	import java.util.ArrayList;

import gurobi.GRB;
import gurobi.GRBEnv;
import gurobi.GRBException;
import gurobi.GRBLinExpr;
import gurobi.GRBModel;
import gurobi.GRBVar;

public class GurobiModel extends Algorithm {

    /** <p>The gurobi environment.</p> */
    GRBEnv env;
    /** <p>The gurobi model.</p> */
    GRBModel grbmodel;
    
	public GurobiModel() {
		super();
	}
	
	public void assignConstraints(Algorithm a) throws GRBException {
	    upperLowerConstraints(a);
	}
	
	/**
	    * <p>Adds upper and lower quota constraints to projects and lecturers, and student upper quota.</p>
	    */
	    private void upperLowerConstraints(Algorithm a) throws GRBException {
	        // ----------------------------------------------------------------------------------------
	        // each student is matched to 1 or less projects
	        for (Student s:a.untouchedStudents) {
	            GRBLinExpr sumVarsForStudent = new GRBLinExpr();
	            // could do for each student
            	for (Project p: s.preferenceList) {
            		sumVarsForStudent.addTerm(1, grbmodel.addVar(0.0, 1.0, 0.0, GRB.BINARY, "pref" + p.name));
            	}
	            // each student is matched to 1 or less projects
	            grbmodel.addConstr(sumVarsForStudent, GRB.LESS_EQUAL, 1.0, "ConstraintStudent " + s.name); //can change this to be less than or equal to the capacity of each project
	        }

	        // ----------------------------------------------------------------------------------------
	        // for each project
	        for (Project p: a.projects) {
	            GRBLinExpr numStudentsForProj = new GRBLinExpr();
	            // for every student, if this project is in their pref list, add term
	            for (Student s: a.untouchedStudents) {
	            	if (s.preferenceList.contains(p)){
	            		sumVarsForStudent.addTerm(1, grbmodel.addVar(0.0, 1.0, 0.0, GRB.BINARY, "pref", s.name));
	            	}
	            }
	            numStudentsForProj.addTerm(1, grbmodel.addVar(0.0, 1.0, 0.0, GRB.BINARY, "pref" + p.name));
	            // The number of students a project has must be less than or equal to the max capacity
	            grbmodel.addConstr(numStudentsForProj, GRB.LESS_EQUAL, (double) p.capacity, "ConstraintProjectUQ" + p.name); //need to set this to be the capacity of each project
	            
	        }

	        // ----------------------------------------------------------------------------------------
	        // for each lecturer 
	        for (Lecturer l: a.testLecturers) {
	            GRBLinExpr numStudentsForLect = new GRBLinExpr();
	            for (int var = 0; var < lecList.size(); var++) {  
	                numStudentsForLect.addTerm(1, lecList.get(var).studentPrefVar);
	            }

	            // The number of students a lecturer has must be greater than or equal to the lower quota
	            grbmodel.addConstr(numStudentsForLect, GRB.GREATER_EQUAL, (double) m.lecturerLowerQuotas[z], "ConstraintLecturerLQ" + z);

	            // The number of students a lecturer has must be less than or equal to the max capacity
	            grbmodel.addConstr(numStudentsForLect, GRB.LESS_EQUAL, (double) m.lecturerUpperQuotas[z], "ConstraintLecturerUQ" + z);
	        }
	    }


}
